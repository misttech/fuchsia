# Copyright 2022 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/icu/config.gni")  # icu_git_info

platform_aibs_dir = get_label_info("//bundles/assembly", "target_out_dir")

# These are the user-buildtype-safe platform AIBs that are used by bootstrap
# feature-set-level assemblies.  This is a subset of the overall platform AIBs
# so that these systems (e.g. bringup) don't need to build the entire platform.
bootstrap_user_platform_aib_names = [
  # The kernel itself
  "zircon",

  # The embeddable feature-set-level
  "embeddable",

  # component_manager is separate from embeddable so that
  # component_manager_with_tracing can be used instead.
  "component_manager",

  # The bootstrap feature-set-level
  "bootstrap",

  # Developer
  "kernel_debug_broker_user",

  # Diagnostics
  "console",

  # Driver Framework
  "driver_framework",

  # Power
  "legacy_power_framework",
  "cpu_manager",

  # Graphics
  "virtcon",

  # Kernel args
  "kernel_args_user",
  "kernel_contiguous_physical_pages",
  "kernel_logs_in_reboot_info",
  "kernel_arm64_event_stream_disable",

  # Static resource files.
  "resources",

  # Emulator Support
  "emulator_support",
  "paravirtualization_support",

  # Storage
  "fshost_common",
  "fshost_fxfs",
  "fshost_fvm",
  "fshost_fvm_f2fs",
  "fshost_fvm_fxfs",
  "fshost_fvm_minfs",
  "fshost_fvm_minfs_migration",
  "fshost_non_eng",
  "fshost_non_recovery",
  "fshost_non_storage_host",
  "fshost_storage",
  "fshost_storage_host_fvm_minfs",
  "fshost_storage_host_fxfs",
  "fshost_storage_host_gpt_fvm_minfs",
  "fshost_recovery",
  "paver_legacy",

  # SWD (Software Delivery)
  "no_update_checker",

  # Platform drivers.
  "wlanphy_driver",
  "bt_transport_uart_driver",
  "bus_kpci_driver",
  "bus_pci_driver",
  "realtek_8211f_driver",
  "xhci_driver",
  "sdhci_driver",
]

# These are the userdebug platform AIBs that are used by bootstrap
# feature-set-level assemblies.  This is a subset of the overall platform AIBs
# so that these systems (e.g. bringup) don't need to build the entire platform.
bootstrap_userdebug_platform_aib_names = [
  # The embeddable feature-set-level
  "embeddable_userdebug",

  # The bootstrap feature-set-level
  "bootstrap_userdebug",

  "clock_development_tools",

  # Kernel args
  "kernel_args_eng",
  "kernel_args_userdebug",

  # Developer
  "bootstrap_realm_development_access",
  "bootstrap_realm_vsock_development_access",
  "kernel_debug_broker_userdebug",
  "netsvc",
  "ptysvc",

  # Emulator Support
  "paravirtualization_support_bootstrap",

  # Power Framework
  "power_framework_broker",
  "power_framework_sag",

  # Trusted application support.
  "trusted_execution_environment",

  # Timekeeper
  # Gives timekeeper some mutable persistent storage. This is optionally
  # used (1) in tests; and (2) on specific platforms that need
  # persistence for RTC functionality.
  "timekeeper_persistence",

  # Wake alarms support: generic and then hardware-specific.
  "timekeeper_wake_alarms",

  # Platform drivers.
  "interconnect_driver",
]

# These are the eng-buildtype-safe platform AIBs that are used by bootstrap
# feature-set-level assemblies.  This is a subset of the overall platform AIBs
# so that these systems (e.g. bringup) don't need to build the entire platform.
bootstrap_eng_platform_aib_names = [
  # The embeddable feature-set-level
  "embeddable_eng",

  # The bootstrap feature-set-level
  "bootstrap_eng",

  # Kernel args
  "kernel_oom_reboot_timeout_low",
  "kernel_oom_behavior_jobkill",
  "kernel_oom_behavior_disable",
  "kernel_pmm_checker_enabled",
  "kernel_pmm_checker_enabled_auto",
  "kernel_serial_legacy",

  # Power Framework
  "power_framework_testing_sag",
  "power_test_platform_drivers",

  # Storage
  "fshost_eng",
  "fshost_storage_host_gpt_fvm_f2fs",
  "partitioning_tools",

  # Testing Support
  "testing_support_bootstrap",

  # PCI utilities
  "lspci",

  # Platform drivers.
  "ufs_driver",
]

# The names of all of the platform's 'testonly=false' Assembly Input Bundles
#
# These are used by the `utility` and the default feature-set-level assembled
# systems.
user_platform_aib_names =
    bootstrap_user_platform_aib_names + [
      ###
      # The common platform bundles

      ## The core realm bundles

      # `/core` itself
      "core_realm",
      "core_realm_user_and_userdebug",

      # The additional children of core we add when we have networking enabled
      "core_realm_networking",
      "network_realm",
      "network_realm_packages",
      "network_realm_packages_gub",
      "network_tun",
      "thread_lowpan",
      "networking_with_virtualization",
      "networking_basic",
      "networking_basic_packages",
      "networking_basic_packages_gub",
      "mdns",

      # The minimal feature-set-level
      "common_standard",

      ###
      # Feature-level / Subsystem-level bundles
      # Keep sorted alphabetically.

      # Bluetooth
      "bluetooth_a2dp",
      "bluetooth_avrcp",
      "bluetooth_core",
      "bluetooth_device_id",
      "bluetooth_hfp_ag",
      "bluetooth_map_mce",
      "bluetooth_snoop_eager",
      "bluetooth_snoop_lazy",

      # Media
      "audio_core",
      "audio_core_routing",
      "audio_core_use_adc_device",
      "audio_device_registry",
      "audio_device_registry_demand",
      "soundplayer",
      "camera",
      "media_codecs",
      "media_sessions",

      # Diagnostics
      "diagnostics_triage_detect_mali",
      "detect_user",

      # Fonts
      "fonts",
      "fonts_hermetic",

      # SWD (Software Delivery)
      "omaha_client",
      "system_update_configurator",

      # Memory monitor
      "memory_monitor",

      # Netstack
      "netstack2",
      "netstack3",
      "netstack3_packages",
      "netstack3_packages_gub",
      "netstack_migration",
      "netstack_migration_packages",
      "netstack_migration_packages_gub",
      "socket-proxy-enabled",
      "socket-proxy-disabled",
      "socket_proxy_packages",

      # Location
      "location_emergency",

      # WLAN
      "wlan_legacy_privacy_support",
      "wlan_contemporary_privacy_only_support",
      "wlan_fullmac_support",
      "wlan_policy",
      "wlan_softmac_support",
      "wlan_wlanix",

      # Sensors
      "sensors_framework",

      # Session
      "element_manager",
      "session_manager",
      "session_manager_disable_pkg_cache",

      # SetUI
      "setui",
      "setui.icu_default_${icu_git_info.default}",
      "setui.icu_latest_${icu_git_info.latest}",
      "setui_with_camera",
      "setui_with_camera.icu_default_${icu_git_info.default}",
      "setui_with_camera.icu_latest_${icu_git_info.latest}",

      # Storage
      "factory_data",
      "storage_cache_manager",

      # ICU-specific version of intl_services

      "intl_services.icu_default_${icu_git_info.default}",
      "intl_services.icu_latest_${icu_git_info.latest}",

      "intl_services_small.icu_default_${icu_git_info.default}",
      "intl_services_small.icu_latest_${icu_git_info.latest}",

      "intl_services_small_with_timezone.icu_default_${icu_git_info.default}",
      "intl_services_small_with_timezone.icu_latest_${icu_git_info.latest}",

      # UI
      "ui",
      "ui_user_and_userdebug",
      "ui_user_and_userdebug.icu_default_${icu_git_info.default}",
      "ui_user_and_userdebug.icu_latest_${icu_git_info.latest}",
      "ui_package_user_and_userdebug",
      "ui_package_eng_userdebug_with_synthetic_device_support",
      "brightness_manager",

      # Drivers
      "radar_proxy_without_injector",

      # Thermal
      "fan",

      # Battery
      "battery_manager",

      # Power metrics recorder
      "power_metrics_recorder",

      # Forensics
      "feedback_large_disk",
      "feedback_remote_device_id_provider",
      "feedback_user_config",
      "feedback_userdebug_config",
      "cobalt_user_config",

      # Kernel Reclamation
      "kernel_anonymous_memory_compression",
      "kernel_anonymous_memory_compression_eager_lru",
      "kernel_page_scanner_aging_fast",
      "kernel_page_table_eviction_never",
      "kernel_page_table_eviction_on_request",

      # Recovery
      "factory_reset",
      "factory_reset_trigger",
      "recovery_fdr",

      # Starnix
      "starnix_support",

      # Virtualization
      "virtualization_support",

      # The tzif zoneinfo files
      "zoneinfo",

      # Security / Trusted Execution
      "tee_manager",
    ]

# The names of all userdebug-allowed platform Assembly Input Bundles
_userdebug_aib_names = bootstrap_userdebug_platform_aib_names + [
                         # Needed by both eng and userdebug products, but contains things disallowed in
                         # user.
                         "adb_support",
                         "bluetooth_hfp_hf",
                         "core_realm_development_access",
                         "core_realm_development_access_rcs_usb",
                         "core_realm_development_access_userdebug",
                         "hvdcp_opti_support",
                         "session_manager_enable_pkg_cache",
                         "standard_userdebug",
                         "standard_userdebug_and_eng",
                         "cobalt_userdebug_config",
                         "mdns_fuchsia_device_wired_service",
                         "nanohub_support",
                         "fastrpc_support",
                         "omaha_client_empty_eager_config",
                         "radar_proxy_with_injector",
                         "sl4f",
                         "wlan_development",

                         # Development and debug tools for connectivity
                         "development_support_tools_connectivity_networking",
                         "development_support_tools_connectivity_wlan",
                         "development_support_tools_connectivity_thread",

                         # Driver migration to Platform AIBs, but not needed in user builds.
                         "fake_battery_driver",

                         # Memory monitor
                         "memory_monitor_with_memory_sampler",
                         "memory_monitor_critical_reports",
                         "memory_monitor2",

                         # Development and debug tools for power framework
                         "power_framework_development_support",

                         # Sensors support with playback.
                         "sensors_framework_eng",

                         # Tracing support.
                         "tracing",

                         # Recovery
                         "recovery_android",

                         # Userspace fastboot over usb support
                         "fastbootd_usb_support",

                         # Location
                         "gnss",
                       ]

userdebug_platform_aib_names = user_platform_aib_names + _userdebug_aib_names

# The names of all of the platform's Assembly Input Bundles.
eng_only_platform_aib_names =
    bootstrap_eng_platform_aib_names + [
      # the core realm additions for eng build-type assemblies
      "core_realm_eng",

      # SSH Config for eng only
      "core_realm_development_access_eng",

      # This isn't in all eng builds, but is in some,
      # and not in any non-eng builds.
      "component_manager_with_tracing",
      "component_manager_with_tracing_and_heapdump",

      # The minimal additions for eng build-type assemblies
      "standard_eng",

      # SWD (Software Delivery)
      "system_update_checker",
      "pkgfs_disable_executability_restrictions",

      # Testing Support
      "testing_support",

      # UI
      "ui_eng",
      "ui_eng.icu_default_${icu_git_info.default}",
      "ui_eng.icu_latest_${icu_git_info.latest}",
      "ui_package_eng",
      "ui_package_eng_userdebug_with_synthetic_device_support",

      # Example AIB
      "example_assembly_bundle",

      # Topology test support
      "topology_test_daemon",

      # Driver development support
      "full_drivers",

      # Audio development/debugging
      "audio_development_support",
      "audio_device_registry_eager",
      "audio_driver_development_tools",
      "audio_full_stack_development_tools",
      "intel_hda",

      # Video development/debugging
      "video_development_support",

      # Fake power sensor
      "fake_power_sensor",

      # Bluetooth testing support
      "bluetooth_a2dp_with_consumer",
      "bluetooth_affordances",
      "bluetooth_pandora",

      # Forensics
      "feedback_upload_config",
      "cobalt_default_config",

      # Memory profiling
      "heapdump_global_collector",
    ]
eng_platform_aib_names =
    userdebug_platform_aib_names + eng_only_platform_aib_names

required_user_aib_names = [
  "embeddable",
  "component_manager",
  "bootstrap",
  "core_realm",
  "core_realm_user_and_userdebug",
  "driver_framework",
  "legacy_power_framework",
  "zircon",
]

required_userdebug_aib_names = required_user_aib_names + [
                                 "embeddable_userdebug",
                                 "bootstrap_userdebug",
                               ]

# An allowlist of experimental AIBs.
#
# If an AIB is added to this experimental list, it does not require security
# review, but will be banned from user builds. These AIBs may still be used
# on userdebug builds as long as scrutiny is not run on those builds.
#
# NOTE: This is an allowlist only. To include your AIB,  you must also add it
# to the appropriate AIB list above.
experimental_aib_names = [
  "adb_support",
  "bootstrap_realm_vsock_development_access",

  # Bluetooth
  # Bluetooth phone calling as the Hands Free role. Currently in development.
  "bluetooth_hfp_hf",

  "hvdcp_opti_support",
  "nanohub_support",
  "fastrpc_support",
  "paravirtualization_support_bootstrap",
  "power_framework_broker",
  "power_framework_sag",
  "power_framework_development_support",

  "session_manager_enable_pkg_cache",

  "sensors_framework_eng",

  # Timekeeper
  # Gives timekeeper some mutable persistent storage. This is optionally
  # used (1) in tests; and (2) on specific platforms that need
  # persistence for RTC functionality.
  "timekeeper_persistence",

  # Wake alarms support: generic and then hardware-specific.
  "timekeeper_wake_alarms",

  "trusted_execution_environment",

  # Recovery
  "recovery_android",

  # Userspace fastboot over usb
  "fastbootd_usb_support",

  # Platform drivers.
  "interconnect_driver",

  # Location
  "gnss",
]

# Ensure that we do not list any experimental AIBs as required
_experimental_required_aibs = required_userdebug_aib_names -
                              (required_userdebug_aib_names +
                               experimental_aib_names - experimental_aib_names)
if (_experimental_required_aibs != []) {
  print(
      "We found experimental AIBs that are marked required. This is not allowed.")
  print(_experimental_required_aibs)
  assert(false, "experimental AIBs cannot be marked required")
}

# Ensure that we do not allow any experimental AIBs in user builds
_experimental_user_aibs =
    user_platform_aib_names -
    (user_platform_aib_names + experimental_aib_names - experimental_aib_names)
if (_experimental_user_aibs != []) {
  print("We found user AIBs in the experimental list, which is not allowed.")
  print("Only userdebug AIBs can be marked experimental.")
  print("Either move the AIBs to userdebug, or go through security review.")
  print(_experimental_user_aibs)
  assert(false, "experimental AIBs cannot be used in user builds")
}

# Ensure that we do not allow any experimental AIBs in eng builds, because it
# does not make any sense. The AIBs in the experimental list are blocked from
# being added to the scrutiny golden files, but scrutiny is never ran on eng
# products.
_experimental_eng_aibs = eng_only_platform_aib_names -
                         (eng_only_platform_aib_names + experimental_aib_names -
                          experimental_aib_names)
if (_experimental_eng_aibs != []) {
  print(
      "We found eng-only AIBs in the experimental list, which does not make sense.")
  print("Only userdebug AIBs can be marked experimental.")
  print(
      "You probably meant to add these AIBs to userdebug, or should not be marking them experimental.")
  print(_experimental_eng_aibs)
  assert(false, "eng-only AIBs cannot be listed as experimental")
}

bringup_platform_aib_labels = []
bringup_platform_aib_files = []
foreach(
    name,
    bootstrap_user_platform_aib_names + bootstrap_userdebug_platform_aib_names +
        bootstrap_eng_platform_aib_names) {
  label = "//bundles/assembly:${name}"
  _target_out_dir = get_label_info(label, "target_out_dir")

  bringup_platform_aib_labels += [ label ]
  bringup_platform_aib_files +=
      [ "${_target_out_dir}/${name}/assembly_config.json" ]
}

user_platform_aib_labels = []
user_platform_aib_files = []
foreach(name, user_platform_aib_names) {
  label = "//bundles/assembly:${name}"
  _target_out_dir = get_label_info(label, "target_out_dir")

  user_platform_aib_labels += [ label ]
  user_platform_aib_files +=
      [ "${_target_out_dir}/${name}/assembly_config.json" ]
}
required_user_platform_aib_files = []
foreach(name, required_user_aib_names) {
  label = "//bundles/assembly:${name}"
  _target_out_dir = get_label_info(label, "target_out_dir")
  required_user_platform_aib_files +=
      [ "${_target_out_dir}/${name}/assembly_config.json" ]
}

userdebug_platform_aib_labels = []
userdebug_platform_aib_files = []
foreach(name, userdebug_platform_aib_names) {
  label = "//bundles/assembly:${name}"
  _target_out_dir = get_label_info(label, "target_out_dir")

  userdebug_platform_aib_labels += [ label ]
  userdebug_platform_aib_files +=
      [ "${_target_out_dir}/${name}/assembly_config.json" ]
}
required_userdebug_platform_aib_files = []
foreach(name, required_userdebug_aib_names) {
  label = "//bundles/assembly:${name}"
  _target_out_dir = get_label_info(label, "target_out_dir")
  required_userdebug_platform_aib_files +=
      [ "${_target_out_dir}/${name}/assembly_config.json" ]
}

experimental_aib_files = []
foreach(name, experimental_aib_names) {
  label = "//bundles/assembly:${name}"
  _target_out_dir = get_label_info(label, "target_out_dir")
  experimental_aib_files +=
      [ "${_target_out_dir}/${name}/assembly_config.json" ]
}

eng_platform_aib_labels = []
eng_platform_aib_files = []
foreach(name, eng_platform_aib_names) {
  label = "//bundles/assembly:${name}"
  _target_out_dir = get_label_info(label, "target_out_dir")

  eng_platform_aib_labels += [ label ]
  eng_platform_aib_files +=
      [ "${_target_out_dir}/${name}/assembly_config.json" ]
}

eng_only_platform_aib_labels = []
eng_only_platform_aib_files = []
foreach(name, eng_only_platform_aib_names) {
  label = "//bundles/assembly:${name}"
  _target_out_dir = get_label_info(label, "target_out_dir")

  eng_only_platform_aib_labels += [ label ]
  eng_only_platform_aib_files +=
      [ "${_target_out_dir}/${name}/assembly_config.json" ]
}
