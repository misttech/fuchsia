# Copyright 2016 Google, LLC
#
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice (including the next
# paragraph) shall be included in all copies or substantial portions of the
# Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
# IN THE SOFTWARE.

import("../../mesa.gni")

src_dir = "$mesa_source_root/src/util"

config("util_public_config") {
  include_dirs = [
    "$mesa_source_root/src",
    "$mesa_source_root/src/util",
    "$mesa_source_root/src/gallium/auxiliary/",
    "$mesa_source_root/src/gallium/include/",
  ]
}

config("build_config") {
  include_dirs = [
    "$mesa_source_root/src/gallium/include/",
    "$mesa_source_root/src/",
  ]
}

mesa_source_set("headers") {
  public_configs = [ ":util_public_config" ]

  sources = [
    "$src_dir/bitset.h",
    "$src_dir/blob.h",
    "$src_dir/build_id.h",
    "$src_dir/debug.h",
    "$src_dir/double.h",
    "$src_dir/fast_idiv_by_const.h",
    "$src_dir/format_srgb.h",
    "$src_dir/futex.h",
    "$src_dir/half_float.h",
    "$src_dir/hash_table.h",
    "$src_dir/list.h",
    "$src_dir/log.h",
    "$src_dir/macros.h",
    "$src_dir/memstream.h",
    "$src_dir/mesa-sha1.h",
    "$src_dir/os_file.h",
    "$src_dir/os_misc.h",
    "$src_dir/os_time.h",
    "$src_dir/perf/u_trace.h",
    "$src_dir/perf/u_trace_priv.h",
    "$src_dir/ralloc.h",
    "$src_dir/register_allocate.h",
    "$src_dir/rgtc.h",
    "$src_dir/rounding.h",
    "$src_dir/set.h",
    "$src_dir/sha1/sha1.h",
    "$src_dir/simple_list.h",
    "$src_dir/softfloat.h",
    "$src_dir/sparse_array.h",
    "$src_dir/strndup.h",
    "$src_dir/strtod.h",
    "$src_dir/texcompress_rgtc_tmp.h",
    "$src_dir/u_atomic.h",
    "$src_dir/u_cpu_detect.h",
    "$src_dir/u_debug.h",
    "$src_dir/u_printf.h",
    "$src_dir/u_process.h",
    "$src_dir/u_queue.h",
    "$src_dir/u_thread.h",
    "$src_dir/u_vector.h",
    "$src_dir/u_worklist.h",
    "$src_dir/vma.h",
  ]
  configs = [ "//build/config:Wno-conversion" ]
}

mesa_source_set("util") {
  include_dirs = [
    "$mesa_source_root/src/mesa/",
    "$mesa_source_root/src/mapi/",
    "$mesa_source_root/src/gallium/auxiliary/",
  ]

  public_deps = [
    ":gen",
    ":headers",
    "$mesa_build_root/include:c_compat",
  ]

  public_configs = [ ":util_public_config" ]

  sources = [
    "$src_dir/anon_file.c",
    "$src_dir/anon_file.h",
    "$src_dir/bigmath.h",
    "$src_dir/bitscan.c",
    "$src_dir/bitscan.h",
    "$src_dir/bitset.h",
    "$src_dir/blob.c",
    "$src_dir/blob.h",
    "$src_dir/build_id.c",
    "$src_dir/build_id.h",
    "$src_dir/cnd_monotonic.h",
    "$src_dir/compiler.h",
    "$src_dir/compress.c",
    "$src_dir/compress.h",
    "$src_dir/crc32.c",
    "$src_dir/crc32.h",
    "$src_dir/dag.c",
    "$src_dir/disk_cache.c",
    "$src_dir/disk_cache.h",
    "$src_dir/disk_cache_os.c",
    "$src_dir/disk_cache_os.h",
    "$src_dir/double.c",
    "$src_dir/double.h",
    "$src_dir/enum_operators.h",
    "$src_dir/fast_idiv_by_const.c",
    "$src_dir/fast_idiv_by_const.h",
    "$src_dir/format_r11g11b10f.h",
    "$src_dir/format_rgb9e5.h",
    "$src_dir/format_srgb.h",
    "$src_dir/fossilize_db.c",
    "$src_dir/fossilize_db.h",
    "$src_dir/futex.h",
    "$src_dir/half_float.c",
    "$src_dir/half_float.h",
    "$src_dir/hash_table.c",
    "$src_dir/hash_table.h",
    "$src_dir/list.h",
    "$src_dir/log.c",
    "$src_dir/macros.h",
    "$src_dir/memstream.c",
    "$src_dir/memstream.h",
    "$src_dir/mesa-sha1.c",
    "$src_dir/mesa-sha1.h",
    "$src_dir/mesa_cache_db.c",
    "$src_dir/mesa_cache_db.h",
    "$src_dir/os_file.c",
    "$src_dir/os_memory_fd.c",
    "$src_dir/os_misc.c",
    "$src_dir/os_misc.h",
    "$src_dir/os_socket.c",
    "$src_dir/os_socket.h",
    "$src_dir/os_time.c",
    "$src_dir/os_time.h",
    "$src_dir/perf/u_trace.c",
    "$src_dir/perf/u_trace.h",
    "$src_dir/perf/u_trace_priv.h",
    "$src_dir/ptralloc.h",
    "$src_dir/ralloc.c",
    "$src_dir/ralloc.h",
    "$src_dir/rand_xor.c",
    "$src_dir/rand_xor.h",
    "$src_dir/rb_tree.c",
    "$src_dir/rb_tree.h",
    "$src_dir/register_allocate.c",
    "$src_dir/register_allocate.h",
    "$src_dir/rgtc.c",
    "$src_dir/rgtc.h",
    "$src_dir/rounding.h",
    "$src_dir/rwlock.c",
    "$src_dir/rwlock.h",
    "$src_dir/set.c",
    "$src_dir/set.h",
    "$src_dir/sha1/sha1.c",
    "$src_dir/sha1/sha1.h",
    "$src_dir/simple_mtx.c",
    "$src_dir/simple_mtx.h",
    "$src_dir/slab.c",
    "$src_dir/slab.h",
    "$src_dir/softfloat.c",
    "$src_dir/softfloat.h",
    "$src_dir/sparse_array.c",
    "$src_dir/sparse_array.h",
    "$src_dir/string_buffer.c",
    "$src_dir/string_buffer.h",
    "$src_dir/strndup.h",
    "$src_dir/strtod.c",
    "$src_dir/strtod.h",
    "$src_dir/texcompress_rgtc_tmp.h",
    "$src_dir/timespec.h",
    "$src_dir/u_atomic.c",
    "$src_dir/u_atomic.h",
    "$src_dir/u_call_once.c",
    "$src_dir/u_call_once.h",
    "$src_dir/u_cpu_detect.c",
    "$src_dir/u_cpu_detect.h",
    "$src_dir/u_debug.c",
    "$src_dir/u_debug.h",
    "$src_dir/u_debug_describe.c",
    "$src_dir/u_debug_describe.h",
    "$src_dir/u_debug_memory.c",
    "$src_dir/u_debug_refcnt.c",
    "$src_dir/u_debug_refcnt.h",
    "$src_dir/u_dl.c",
    "$src_dir/u_dl.h",
    "$src_dir/u_dynarray.h",
    "$src_dir/u_endian.h",
    "$src_dir/u_fifo.h",
    "$src_dir/u_hash_table.c",
    "$src_dir/u_hash_table.h",
    "$src_dir/u_idalloc.c",
    "$src_dir/u_idalloc.h",
    "$src_dir/u_math.c",
    "$src_dir/u_math.h",
    "$src_dir/u_memset.h",
    "$src_dir/u_mm.c",
    "$src_dir/u_mm.h",

    # TODO(https://fxbug.dev/301509045): enable Perfetto support.
    # "u_perfetto.c",
    # "u_perfetto.h",
    "$src_dir/u_pointer.h",
    "$src_dir/u_printf.c",
    "$src_dir/u_printf.h",
    "$src_dir/u_process.c",
    "$src_dir/u_process.h",
    "$src_dir/u_qsort.cpp",
    "$src_dir/u_qsort.h",
    "$src_dir/u_queue.c",
    "$src_dir/u_queue.h",
    "$src_dir/u_string.h",
    "$src_dir/u_thread.c",
    "$src_dir/u_thread.h",
    "$src_dir/u_vector.c",
    "$src_dir/u_vector.h",
    "$src_dir/u_worklist.c",
    "$src_dir/u_worklist.h",
    "$src_dir/vl_rbsp.h",
    "$src_dir/vl_vlc.h",
    "$src_dir/vma.c",
    "$src_dir/vma.h",
    "$src_dir/xxhash.h",
  ]

  deps = [ "$mesa_build_root/src/c11" ]

  if (current_os == "fuchsia") {
    sources += [ "$src_dir/futex_fuchsia.c" ]
    deps += [
      "//sdk/lib/syslog/structured_backend",
      "//sdk/lib/zxio",
      "//zircon/system/ulib/zx",
    ]
  } else {
    if (current_os == "linux") {
      sources += [ "futex.c" ]
    }

    sources += [
      "$src_dir/anon_file.c",
      "$src_dir/anon_file.h",
    ]
  }

  # Would need to do something different for Android.  See meson.build
  sources += [
    "$src_dir/u_debug_stack.c",
    "$src_dir/u_debug_symbol.c",
    "$src_dir/u_debug_symbol.h",
  ]

  configs = [
    ":build_config",
    "//build/config:Wno-conversion",
    "//build/config:Wno-strict-prototypes",
  ]
}

mesa_source_set("magma_util") {
  public_deps = [
    ":util",
    "$mesa_build_root/src/os",
    "$mesa_build_root/src/util/magma",
  ]

  defines = [ "USE_MAGMA=1" ]

  public_configs = [ ":util_public_config" ]
}

mesa_source_set("zircon_util") {
  public_deps = [
    ":util",
    "$mesa_build_root/src/os:zircon_os",
  ]

  public_configs = [ ":util_public_config" ]
}

mesa_source_set("xmlconfig") {
  sources = [
    "$src_dir/xmlconfig.c",
    "$src_dir/xmlconfig.h",
  ]

  deps = [
    ":gen",
    "//third_party/expat",
  ]

  configs = [ ":util_public_config" ]
}

mesa_python_stdout_to_file_action("format_srgb") {
  output = "format_srgb.c"
  script = "$src_dir/format_srgb.py"
}

mesa_python_action("driconf_static") {
  output_name = "driconf_static.h"
  script = "$src_dir/driconf_static.py"
  inputs = [ "$src_dir/00-mesa-defaults.conf" ]
  outputs = [ "$target_gen_dir/$output_name" ]
  args = [
    rebase_path(src_dir) + "/00-mesa-defaults.conf",
    rebase_path(target_gen_dir, root_build_dir) + "/$output_name",
  ]
}

config("gen_public_config") {
  include_dirs = [ target_gen_dir ]
}

mesa_source_set("gen") {
  public_configs = [ ":gen_public_config" ]

  deps = [
    ":driconf_static",
    ":format_srgb",
    "$mesa_build_root/include:c_compat",
  ]

  include_dirs = [ src_dir ]

  sources = [ "$target_gen_dir/format_srgb.c" ]
  configs = [
    ":build_config",
    "//build/config:Wno-conversion",
  ]
}
