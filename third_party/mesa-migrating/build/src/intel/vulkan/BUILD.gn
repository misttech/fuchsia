# Copyright 2016 Google, LLC
#
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice (including the next
# paragraph) shall be included in all copies or substantial portions of the
# Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
# IN THE SOFTWARE.

import("//src/graphics/lib/magma/gnbuild/magma.gni")
import("../../../mesa.gni")

src_dir = "$mesa_source_root/src/intel/vulkan"

assert(is_fuchsia)

declare_args() {
  # TODO(https://fxbug.dev/42146493) - remove once external sync FD extensions fully supported
  anv_enable_external_sync_fd = false
  anv_enable_raytracing = false

  # Give maximum possible memory to Vulkan heap
  anv_use_max_ram = false
}

config("vulkan_internal_config") {
  defines = [ "USE_MAGMA=1" ]

  if (!anv_enable_external_sync_fd) {
    defines += [ "DISABLE_EXTERNAL_SYNC_FD=1" ]
  }
  if (anv_enable_raytracing) {
    defines += [ "ANV_SUPPORT_RT=1" ]
  } else {
    defines += [ "ANV_SUPPORT_RT=0" ]
  }
  if (anv_use_max_ram) {
    defines += [ "ANV_AVAILABLE_RAM_FRACTION=1.0" ]
  }

  include_dirs = [
    src_dir,
    "$src_dir/..",  # because  anv_private.h includes isl/isl.h
    "$mesa_source_root/include/drm-uapi",  # because anv_private.h includes
                                           # i915_drm.h
    "$mesa_source_root/src",  # because isl.h includes util/macros.h
    "$mesa_source_root/src/vulkan/util",  # because anv_private.h includes
                                          # vk_alloc.h
    "$root_gen_dir/third_party/mesa-migrating/build/src/intel/vulkan",
  ]

  # Suppress warnings the vulkan code doesn't comply with.
  configs = [
    "//build/config:Wno-unused-but-set-variable",
    "//build/config:Wno-strict-prototypes",
  ]
}

# Use a config rather than setting ldflags directly so the ldflags
# may overwrite the --build-id (no sha1) setting in a base config.
config("vulkan_icd_config") {
  ldflags = [
    "-static-libstdc++",
    "-Wl,--build-id=sha1",
  ]
}

magma_vulkan_icd("vulkan_intel") {
  output_name = "libvulkan_intel"
  deps = [ ":vulkan_internal" ]

  if (is_fuchsia) {
    imported_symbols_allowlist =
        rebase_path(
            "//src/graphics/lib/magma/gnbuild/imported_symbols.allowlist")
    deps += [
      "//src/graphics/lib/magma/src/libmagma",
      # TODO(https://fxbug.dev/13095); enable this when fx logger failure case is handled
      #"$mesa_build_root/src/os:fuchsia_libc_static",
    ]
  }

  configs = [ ":vulkan_icd_config" ]
}

# Also used by testing targets
mesa_source_set("vulkan_internal") {
  public_deps = [
    "$mesa_build_root/include:vulkan",
    "$mesa_build_root/src/intel/compiler",
    "$mesa_build_root/src/vulkan/wsi",
  ]
  cflags_cc = [ "-Wno-c++11-narrowing" ]

  public_configs = [
    ":vulkan_internal_config",
    "$mesa_build_root/src/vulkan/runtime:magma_config",
  ]

  deps = [
    ":anv_entrypoints",
    ":float64_spv_h",
    ":gen",
    "$mesa_build_root/include:c_compat",
    "$mesa_build_root/src:sha1",
    "$mesa_build_root/src/compiler/nir",
    "$mesa_build_root/src/compiler/spirv",
    "$mesa_build_root/src/intel:genxml",
    "$mesa_build_root/src/intel:isl",
    "$mesa_build_root/src/intel/blorp",
    "$mesa_build_root/src/intel/common",
    "$mesa_build_root/src/intel/dev",
    "$mesa_build_root/src/intel/perf",
    "$mesa_build_root/src/os",
    "$mesa_build_root/src/util:magma_util",
    "$mesa_build_root/src/vulkan/runtime",
    "$mesa_build_root/src/vulkan/util",
    "//sdk/lib/magma_client:magma_headers",
    "//src/graphics/drivers/msd-intel-gen/include",
  ]

  sources = [
    "$src_dir/anv_allocator.c",
    "$src_dir/anv_android_stubs.c",
    "$src_dir/anv_batch_chain.c",
    "$src_dir/anv_blorp.c",
    "$src_dir/anv_bo_sync.c",
    "$src_dir/anv_cmd_buffer.c",
    "$src_dir/anv_descriptor_set.c",
    "$src_dir/anv_device.c",
    "$src_dir/anv_formats.c",
    "$src_dir/anv_genX.h",
    "$src_dir/anv_image.c",
    "$src_dir/anv_magma.c",
    "$src_dir/anv_magma_buffer_collection.c",
    "$src_dir/anv_magma_connection.cc",
    "$src_dir/anv_measure.c",
    "$src_dir/anv_nir.h",
    "$src_dir/anv_nir_add_base_work_group_id.c",
    "$src_dir/anv_nir_apply_pipeline_layout.c",
    "$src_dir/anv_nir_compute_push_layout.c",
    "$src_dir/anv_nir_lower_multiview.c",
    "$src_dir/anv_nir_lower_ubo_loads.c",
    "$src_dir/anv_nir_lower_ycbcr_textures.c",
    "$src_dir/anv_nir_push_descriptor_analysis.c",
    "$src_dir/anv_perf.c",
    "$src_dir/anv_pipeline.c",
    "$src_dir/anv_pipeline_cache.c",
    "$src_dir/anv_private.h",
    "$src_dir/anv_queue.c",
    "$src_dir/anv_util.c",
    "$src_dir/anv_utrace.c",
    "$src_dir/anv_wsi.c",
    "$src_dir/vk_format_info.h",
    "$target_gen_dir/anv_entrypoints.c",
    "$target_gen_dir/anv_entrypoints.h",
  ]

  configs = [
    "//build/config:Wno-conversion",
    "//build/config:Wno-strict-prototypes",
  ]
}

group("gen") {
  deps = [
    ":gen11",
    ":gen12",
    ":gen125",
    ":gen9",
  ]
}

template("vulkan_gen8") {
  mesa_source_set(target_name) {
    defines = [ invoker.defines ]

    configs = [
      ":vulkan_internal_config",
      "$mesa_build_root/src/vulkan/runtime:magma_config",
    ]

    sources = [
      "$src_dir/genX_blorp_exec.c",
      "$src_dir/genX_cmd_buffer.c",
      "$src_dir/genX_gpu_memcpy.c",
      "$src_dir/genX_pipeline.c",
      "$src_dir/genX_query.c",
      "$src_dir/genX_state.c",
      "$src_dir/gfx8_cmd_buffer.c",
    ]

    deps = [
      ":anv_entrypoints",
      "$mesa_build_root/include:c_compat",
      "$mesa_build_root/include:vulkan",
      "$mesa_build_root/src/intel:genxml",
      "$mesa_build_root/src/intel:isl",
      "$mesa_build_root/src/intel/blorp",
      "$mesa_build_root/src/intel/compiler",
      "$mesa_build_root/src/intel/ds",
      "$mesa_build_root/src/vulkan/wsi",
      "//sdk/lib/magma_client:magma_headers",
    ]
  }
}

vulkan_gen8("gen9") {
  defines = "GFX_VERx10=90"
}

vulkan_gen8("gen11") {
  defines = "GFX_VERx10=110"
}

vulkan_gen8("gen12") {
  defines = "GFX_VERx10=120"
}

vulkan_gen8("gen125") {
  defines = "GFX_VERx10=125"
}

mesa_python_action("anv_entrypoints") {
  outputs = [
    "$target_gen_dir/anv_entrypoints.h",
    "$target_gen_dir/anv_entrypoints.c",
  ]

  script = "$mesa_source_root/src/vulkan/util/vk_entrypoints_gen.py"

  inputs = [
    "$mesa_source_root/src/vulkan/util/vk_dispatch_table_gen.py",
    "$mesa_source_root/src/vulkan/util/vk_extensions.py",
    "$mesa_source_root/src/vulkan/util/vk_entrypoints.py",
    "$mesa_source_root/src/vulkan/registry/vk.xml",
  ]

  args = [
    "--xml",
    rebase_path("$mesa_source_root", root_build_dir) +
        "/src/vulkan/registry/vk.xml",
    "--proto",
    "--weak",
    "--out-h",
    rebase_path("$target_gen_dir/anv_entrypoints.h", root_build_dir),
    "--out-c",
    rebase_path("$target_gen_dir/anv_entrypoints.c", root_build_dir),
    "--prefix",
    "anv",
    "--device-prefix",
    "gfx9",
    "--device-prefix",
    "gfx11",
    "--device-prefix",
    "gfx12",
    "--device-prefix",
    "gfx125",
  ]
}

mesa_python_action("float64_spv_h") {
  float64_spv_h = "${target_gen_dir}/float64_spv.h"
  outputs = [ float64_spv_h ]

  script = "${mesa_source_root}/src/util/glsl2spirv.py"

  float64_glsl = "${mesa_source_root}/src/compiler/glsl/float64.glsl"
  sources = [ float64_glsl ]
  inputs = [ "${host_out_dir}/glslang_validator" ]

  args = [
    rebase_path(float64_glsl, root_build_dir),
    rebase_path(float64_spv_h, root_build_dir),
    rebase_path("${host_out_dir}/glslang_validator", root_build_dir),
    "--create-entry",
    "main",
    "--vn",
    "float64_spv_source",
    "--glsl-version",
    "450",
    "-Olib",
  ]

  deps = [ "//third_party/glslang:glslang_validator($host_toolchain)" ]
}
