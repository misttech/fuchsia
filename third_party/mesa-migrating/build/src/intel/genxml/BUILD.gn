# Copyright 2016 Google, LLC
#
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice (including the next
# paragraph) shall be included in all copies or substantial portions of the
# Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
# IN THE SOFTWARE.

import("//third_party/mako/py_srcs.gni")
import("../../../mesa.gni")

src_dir = "$mesa_source_root/src/intel/genxml"

engines = [ "--engines=render,blitter,video" ]

mesa_python_stdout_to_file_action("gen_pack7_header") {
  output = "gen7_pack.h"
  script = "$src_dir/gen_pack_header.py"
  inputs = [ "$src_dir/gen7.xml" ]
  sources = [ "$src_dir/util.py" ]
  args = rebase_path(inputs, root_build_dir) + engines
}

mesa_python_stdout_to_file_action("gen_pack75_header") {
  output = "gen75_pack.h"
  script = "$src_dir/gen_pack_header.py"
  inputs = [ "$src_dir/gen75.xml" ]
  sources = [ "$src_dir/util.py" ]
  args = rebase_path(inputs, root_build_dir) + engines
}

mesa_python_stdout_to_file_action("gen_pack8_header") {
  output = "gen8_pack.h"
  script = "$src_dir/gen_pack_header.py"
  inputs = [ "$src_dir/gen8.xml" ]
  sources = [ "$src_dir/util.py" ]
  args = rebase_path(inputs, root_build_dir) + engines
}

mesa_python_stdout_to_file_action("gen_pack9_header") {
  output = "gen9_pack.h"
  script = "$src_dir/gen_pack_header.py"
  inputs = [ "$src_dir/gen9.xml" ]
  sources = [ "$src_dir/util.py" ]
  args = rebase_path(inputs, root_build_dir) + engines
}

mesa_python_stdout_to_file_action("gen_pack11_header") {
  output = "gen11_pack.h"
  script = "$src_dir/gen_pack_header.py"
  inputs = [ "$src_dir/gen11.xml" ]
  sources = [ "$src_dir/util.py" ]
  args = rebase_path(inputs, root_build_dir) + engines
}

mesa_python_stdout_to_file_action("gen_pack12_header") {
  output = "gen12_pack.h"
  script = "$src_dir/gen_pack_header.py"
  inputs = [ "$src_dir/gen12.xml" ]
  sources = [ "$src_dir/util.py" ]
  args = rebase_path(inputs, root_build_dir) + engines
}

mesa_python_stdout_to_file_action("gen_pack125_header") {
  output = "gen125_pack.h"
  script = "$src_dir/gen_pack_header.py"
  inputs = [ "$src_dir/gen125.xml" ]
  sources = [ "$src_dir/util.py" ]
  args = rebase_path(inputs, root_build_dir) + engines
}

mesa_python_stdout_to_file_action("gen_rt_header") {
  output = "gen_rt_pack.h"
  script = "$src_dir/gen_pack_header.py"
  inputs = [ "$src_dir/gen_rt.xml" ]
  sources = [ "$src_dir/util.py" ]
  args = rebase_path(inputs, root_build_dir) + engines
}

genX_bits_included_symbols = [
  "MI_BATCH_BUFFER_START::Batch Buffer Start Address,",
  "MI_REPORT_PERF_COUNT::Memory Address,",
  "MI_STORE_DATA_IMM::Address,",
  "MI_STORE_DATA_IMM::Immediate Data,",
  "MI_STORE_REGISTER_MEM::Memory Address,",
  "3DSTATE_DEPTH_BUFFER::Surface Base Address,",
  "3DSTATE_DEPTH_BUFFER::Surface Pitch,",
  "3DSTATE_STENCIL_BUFFER::Surface Base Address,",
  "3DSTATE_STENCIL_BUFFER::Surface Pitch,",
  "3DSTATE_HIER_DEPTH_BUFFER::Surface Base Address,",
  "3DSTATE_HIER_DEPTH_BUFFER::Surface Pitch,",
  "3DSTATE_CLEAR_PARAMS,",
  "3DSTATE_SO_BUFFER::Surface Base Address,",
  "3DSTATE_SO_BUFFER::Stream Offset,",
  "3DSTATE_CPSIZE_CONTROL_BUFFER::Surface Base Address,",
  "3DSTATE_CPSIZE_CONTROL_BUFFER::Surface Pitch,",
  "RENDER_SURFACE_STATE::Surface Base Address,",
  "RENDER_SURFACE_STATE::Surface Pitch,",
  "RENDER_SURFACE_STATE::Auxiliary Surface Base Address,",
  "RENDER_SURFACE_STATE::Auxiliary Surface Pitch,",
  "RENDER_SURFACE_STATE::Clear Value Address,",
  "RENDER_SURFACE_STATE::Red Clear Color,",
  "RENDER_SURFACE_STATE::Green Clear Color,",
  "RENDER_SURFACE_STATE::Blue Clear Color,",
  "RENDER_SURFACE_STATE::Alpha Clear Color,",
  "CLEAR_COLOR,",
  "VERTEX_BUFFER_STATE::Buffer Starting Address,",
  "CPS_STATE",
]

mesa_python_stdout_to_file_action("gen_bits_header") {
  output = "genX_bits.h"
  script = "$src_dir/gen_bits_header.py"
  inputs = [
    "$src_dir/gen11.xml",
    "$src_dir/gen12.xml",
    "$src_dir/gen125.xml",
    "$src_dir/gen7.xml",
    "$src_dir/gen75.xml",
    "$src_dir/gen8.xml",
    "$src_dir/gen9.xml",
  ]
  sources = [ "$src_dir/util.py" ]
  libraries = [ "//third_party/mako" ]
  args = rebase_path(inputs, root_build_dir)
  args += [ "--include-symbols" ]

  symstring = ""
  foreach(symbol, genX_bits_included_symbols) {
    symstring += symbol
  }
  args += [ symstring ]
}
