# Copyright 2016 Google, LLC
#
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice (including the next
# paragraph) shall be included in all copies or substantial portions of the
# Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
# IN THE SOFTWARE.

group("magma_vulkan") {
  public_deps = [
    "//third_party/mesa-migrating/build/include:vulkan",
    "//third_party/mesa-migrating/build/src/intel/vulkan:vulkan_intel",
  ]
}

group("tests") {
  testonly = true

  public_deps = [
    "//third_party/mesa-migrating/build/src/intel/vulkan/tests",
    "//third_party/mesa-migrating/build/tests",
  ]
}

config("build_config") {
  defines = [
    "LLVM_AVAILABLE",

    # In meson.build, this refers to the LLVM version required to support the selected features
    # (e.g. in Lavapipe).  It is *not* the version of the LLVM we are using, although that version
    # must be >= the value listed here.
    "MESA_LLVM_VERSION_STRING=\">= 17.0.0\"",
    "LLVM_IS_SHARED=0",
    "DRAW_LLVM_AVAILABLE=1",

    "GALLIUM_LLVMPIPE",
  ]

  if (is_fuchsia) {
    defines += [ "VK_USE_PLATFORM_FUCHSIA=1" ]
  }
}

# TODO(https://fxbug.dev/321122796): temporary, this should be replaced by
# `//src/lib/llvm:LLVMHeader_config` at some point, once that one uses platform-specific headers,
# not just the ${host_platform} ones.  This also works around a versioning problem: the sandbox
# version of LLVM used by Mesa is newer than the prebuilt headers.
config("LLVMHeader_config") {
  cflags = [ "-isystem" + rebase_path(
                 "//prebuilt/third_party/llvm/${current_platform}/include",
                 root_build_dir) ]
}
